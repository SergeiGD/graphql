input CreateRoomInput {
  roomNumber: Int
  categoryId: Int!
}

input CreateCategoryInput {
  name: String!
  description: String!
  price: Float!
  prepaymentPercent: Float!
  refundPercent: Float!
  roomsCount: Int!
  floors: Int!
  beds: Int!
  square: Float!
}

input CreatePhotoInput {
  categoryId: Int!
}

input CreateClientInput {
  firstName: String
  lastName: String
  email: String!
  dateOfBirth: Date
}

input CreateWorkerInput {
  firstName: String
  lastName: String
  email: String!
  salary: Float!
}

input CreateGroupInput {
  name: String!
}

input CreateTagInput {
  name: String!
}

input CreateOrderInput {
  clientId: Int!
}

input CreatePurchaseInput {
  start: Date!
  end: Date!
  categoryId: Int!
  orderId: Int!
}

input CreateCartPurchaseInput {
  start: Date!
  end: Date!
  categoryId: Int!
}

input CreateSaleInput {
  name: String!
  description: String!
  discount: Float!
  startDate: Datetime!
  endDate: Datetime!
}

input UpdatePhotoInput {
  order: Int
}

input UpdateRoomInput {
  roomNumber: Int
}

input UpdateCategoryInput {
  name: String
  description: String
  price: Float
  prepaymentPercent: Float
  refundPercent: Float
  roomsCount: Int
  floors: Int
  beds: Int
  square: Float
}

input UpdateClientInput {
  firstName: String
  lastName: String
  email: String
  dateOfBirth: Date
}

input UpdateWorkerInput {
  firstName: String
  lastName: String
  email: String
  salary: Float
}

input UpdateGroupInput {
  name: String
}

input UpdateTagInput {
  name: String
}

input UpdateSaleInput {
  name: String
  description: String
  discount: Float
  startDate: Datetime
  endDate: Datetime
}

input UpdateOrderInput {
  comment: String
  paid: Float
  refunded: Float
}

input UpdatePurchaseInput {
  start: Date
  end: Date
}

input DatesInput {
  dateStart: Date
  dateEnd: Date
}

input SingUpInput {
  email: String!
  password: String!
}

input CategoriesFilter {
  id: Int
  name: String
  showHidden: Boolean = false
  bedsFrom: Int
  bedsUntil: Int
  floorsFrom: Int
  floorsUntil: Int
  squareFrom: Int
  squareUntil: Int
  freeDates: FreeDates
  roomsFrom: Int
  roomsUntil: Int
  priceFrom: Int
  priceUntil: Int
  page: Int = 1
  pageSize: Int = 8
  sortBy: CategorySortBy = id
  desc: Boolean = false
}

input SalesFilter {
  id: Int
  name: String
  discountFrom: Int
  discountUntil: Int
  dateFrom: Date
  dateUntil: Date
  page: Int = 1
  pageSize: Int = 8
  sortBy: CategorySortBy = id
  desc: Boolean = false
}

input FreeDates {
  dateFrom: Date!
  dateUntil: Date!
}

type Mutation {
  createTag(input: CreateTagInput!): TagResult!
  createCategory(input: CreateCategoryInput!, file: Upload!): CategoryResult
  createRoom(input: CreateRoomInput!): RoomResult!
  createPhoto(input: CreatePhotoInput!, file: Upload!): PhotoResult!
  createClient(input: CreateClientInput!): ClientResult!
  createOrder(input: CreateOrderInput!): OrderResult!
  createCart: Cart!
  createPurchase(input: CreatePurchaseInput!): PurchaseResult!
  createCartPurchase(
    cartUuid: String!
    input: CreateCartPurchaseInput!
  ): PurchaseResult!
  createSale(input: CreateSaleInput!, file: Upload!): SaleResult!
  createWorker(input: CreateWorkerInput!): WorkerResult!
  createGroup(input: CreateGroupInput!): GroupResult!
  updatePhoto(id: Int!, input: UpdatePhotoInput!, file: Upload): PhotoResult!
  updateCategory(
    id: Int!
    file: Upload
    input: UpdateCategoryInput!
  ): CategoryResult!
  updateRoom(id: Int!, input: UpdateRoomInput!): RoomResult!
  updateTag(id: Int!, input: UpdateTagInput!): TagResult!
  updateClient(id: Int!, input: UpdateClientInput!): ClientResult!
  updateWorker(id: Int!, input: UpdateWorkerInput!): WorkerResult!
  updateGroup(id: Int!, input: UpdateGroupInput!): GroupResult!
  updateOrder(id: Int!, input: UpdateOrderInput!): OrderResult!
  updatePurchase(id: Int!, input: UpdatePurchaseInput!): PurchaseResult!
  updateCartPurchase(
    cartUuid: String!
    id: Int!
    input: UpdatePurchaseInput!
  ): PurchaseResult!
  updateSale(id: Int!, input: UpdateSaleInput!, file: Upload): SaleResult!
  deleteRoom(id: Int!): DeleteResult!
  deletePhoto(id: Int!): DeleteResult!
  deleteSale(id: Int!): DeleteResult!
  deleteWorker(id: Int!): DeleteResult!
  deleteClient(id: Int!): DeleteResult!
  deleteCategory(id: Int!): DeleteResult!
  deleteTag(id: Int!): DeleteResult!
  deleteGroup(id: Int!): DeleteResult!
  cancelPurchase(id: Int!): PurchaseResult!
  cancelCartPurchase(cartUuid: String!, id: Int!): PurchaseResult!
  cancelOrder(id: Int!): OrderResult!
  addTagToCategory(tagId: Int!, categoryId: Int!): TagCategoryResult!
  addSaleToCategory(saleId: Int!, categoryId: Int!): SaleCategoryResult!
  addGroupToWorker(groupId: Int!, workerId: Int!): WorkerGroupResult!
  addPermissionToGroup(
    groupId: Int!
    permissionId: Int!
  ): GroupPermissionResult!
  removeTagFromCategory(tagId: Int!, categoryId: Int!): TagCategoryResult!
  removeSaleFromCategory(saleId: Int!, categoryId: Int!): SaleCategoryResult!
  removeGroupFromWorker(groupId: Int!, workerId: Int!): WorkerGroupResult!
  removePermissionFromGroup(
    groupId: Int!
    permissionId: Int!
  ): GroupPermissionResult!
  login(login: String!, password: String!): LoginResult!
  singUp(input: SingUpInput!): AccountActionResult!
  confirmAccount(token: String!): UserResult!
  requestReset(email: String!): AccountActionResult!
  confirmReset(token: String!, password: String!): UserResult!
  refreshToken(refreshToken: String!): LoginResult!
  confirmCart(
    cartUuid: String!
    email: String!
    isFullyPaid: Boolean!
  ): ClientOrderResult!
  payClientOrder(id: Int!): ClientOrderResult!
  cancelClientOrder(id: Int!): ClientOrderResult!
}

type Query {
  getTags(tagId: Int): TagsResult!
  getCategories(filter: CategoriesFilter!): CategoriesResult!
  getRooms(roomId: Int): RoomsResult!
  getPhotos(photoId: Int): PhotosResult!
  getClients(clientId: Int): ClientsResult!
  getOrders(orderId: Int): OrdersResult!
  getPurchases(purchaseId: Int): PurchasesResult!
  getSales(filter: SalesFilter!): SalesResult!
  getWorkers(workerId: Int): WorkersResult!
  getGroups(groupId: Int): GroupsResult!
  getPermissions(permissionId: Int): PermissionsResult!
  getCart(cartUuid: String!): CartResult!
  getClientOrders(orderId: Int): ClientOrdersResult!
  getProfileInfo: UserResult!
}

type RoomsResult {
  status: OperationStatus!
  rooms: [Room]
}

type CategoriesResult {
  status: OperationStatus!
  categories: [Category]
  pagesCount: Int
}

type WorkersResult {
  status: OperationStatus!
  workers: [Worker]
}

type GroupsResult {
  status: OperationStatus!
  groups: [Group]
}

type PermissionsResult {
  status: OperationStatus!
  permissions: [Permission]
}

type ClientsResult {
  status: OperationStatus!
  clients: [Client]
}

type OrdersResult {
  status: OperationStatus!
  orders: [Order]
}

type PurchasesResult {
  status: OperationStatus!
  purchases: [Purchase]
}

type PhotosResult {
  status: OperationStatus!
  photos: [Photo]
}

type ClientOrdersResult {
  status: OperationStatus!
  orders: [ClientOrder]
}

type SalesResult {
  status: OperationStatus!
  sales: [Sale]
  pagesCount: Int
}

type TagsResult {
  status: OperationStatus!
  tags: [Tag]
}

type CartResult {
  status: OperationStatus!
  cart: Cart
}

type BookedDatesResult {
  dates: [Date]
  status: OperationStatus
}

type RoomResult {
  status: OperationStatus!
  room: Room
}

type ClientResult {
  status: OperationStatus!
  client: Client
}

type WorkerResult {
  status: OperationStatus!
  worker: Worker
}

type GroupResult {
  status: OperationStatus!
  group: Group
}

type OrderResult {
  status: OperationStatus!
  order: Order
}

type ClientOrderResult {
  status: OperationStatus!
  order: ClientOrder
}

type CategoryResult {
  status: OperationStatus!
  category: Category
}

type UsersResult {
  status: OperationStatus!
  users: [UserUnion]
}

type BaseOrderResult {
  status: OperationStatus!
  order: BaseOrderUnion
}

type PhotoResult {
  status: OperationStatus!
  photo: Photo
}

type TagResult {
  status: OperationStatus!
  tag: Tag
}

type PurchaseResult {
  status: OperationStatus!
  purchase: Purchase
}

type LoginResult {
  status: OperationStatus!
  tokens: AuthTokens
}

type AccountActionResult {
  status: OperationStatus!
  token: String
  user: User
}

type SaleResult {
  status: OperationStatus!
  sale: Sale
}

type UserResult {
  status: OperationStatus!
  user: User
}

type TagCategoryResult {
  status: OperationStatus!
  tag: Tag
  category: Category
}

type WorkerGroupResult {
  status: OperationStatus!
  group: Group
  worker: Worker
}

type GroupPermissionResult {
  status: OperationStatus!
  group: Group
  permission: Permission
}

type SaleCategoryResult {
  status: OperationStatus!
  sale: Sale
  category: Category
}

type DeleteResult {
  status: OperationStatus!
}

type Room {
  id: Int!
  roomNumber: Int!
  category: Category!
}

type Photo {
  id: Int!
  order: Int!
  category: Category!
  path: String!
}

type Tag {
  id: Int!
  name: String!
  categories: [Category]!
}

type Category {
  id: Int!
  name: String!
  description: String!
  price: Float!
  prepaymentPercent: Float!
  refundPercent: Float!
  mainPhotoPath: String!
  roomsCount: Int!
  floors: Int!
  beds: Int!
  square: Float!
  tags: [Tag]!
  rooms: [Room]!
  familiar: [Category]!
  sales: [Sale]!
  photos: [Photo]!
  bookedDates(dateStart: Date!, dateEnd: Date!): BookedDatesResult!
}

type Client {
  id: Int!
  firstName: String
  lastName: String
  email: String!
  dateOfBirth: Date
  orders: OrdersResult!
}

type User {
  id: Int!
  firstName: String
  lastName: String
  email: String!
  dateCreated: String!
  isConfirmed: String!
}

type Order {
  id: Int!
  dateCreated: Datetime!
  price: Float!
  prepayment: Float!
  comment: String
  paid: Float!
  refunded: Float!
  leftToPay: Float!
  leftToRefund: Float!
  dateFullPrepayment: Datetime
  dateFullPaid: Datetime
  dateFinished: Datetime
  dateCanceled: Datetime
  client: ClientResult!
  purchases: PurchasesResult!
}

type ClientOrder {
  id: Int!
  price: Float!
  prepayment: Float!
  comment: String
  paid: Float!
  refunded: Float!
  leftToPay: Float!
  leftToRefund: Float!
  dateCreated: Datetime!
  dateFullPrepayment: Datetime
  dateFullPaid: Datetime
  dateFinished: Datetime
  dateCanceled: Datetime
  purchases: [Purchase]!
}

type Cart {
  id: Int!
  cartUuid: String!
  dateCreated: Datetime!
  price: Float!
  prepayment: Float!
  purchases: [Purchase]!
}

type Purchase {
  id: Int!
  start: Date!
  end: Date!
  price: Float!
  prepayment: Float!
  refund: Float
  isPaid: Boolean!
  isPrepaymentPaid: Boolean!
  isCanceled: Boolean!
  order: BaseOrderResult!
  room: Room!
}

type Sale {
  id: Int!
  name: String!
  description: String!
  discount: Float!
  imagePath: String!
  startDate: Datetime!
  endDate: Datetime!
  categories: [Category]!
}

type Permission {
  id: Int!
  name: String!
  code: String!
}

type Group {
  id: Int!
  name: String!
  permissions: PermissionsResult!
  users: UsersResult!
}

type Worker {
  id: Int!
  firstName: String
  lastName: String
  email: String!
  salary: Float!
  groups: GroupsResult!
}

type AuthTokens {
  accessToken: String!
  refreshToken: String!
}

scalar Datetime

scalar Date

scalar Upload

union UserUnion = Client | Worker

union BaseOrderUnion = Order | Cart

enum CategorySortBy {
  id
  name
  beds
  square
  floors
  roomsCount
  price
}

type OperationStatus {
  success: Boolean!
  error: String
}
